{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","sort","changeTodos","event","setState","target","value","filterTodos","todos","filter","todo","completed","visibleTodos","props","title","toLocaleLowerCase","includes","selectedUserId","this","newTodos","className","onChange","type","placeholder","map","readOnly","checked","onClick","userId","id","React","Component","request","url","fetch","then","response","json","getUser","CurrentUser","user","loadUser","a","selectedUser","prevProps","clearUserId","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18d7d027.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: (arg1: number) => void;\n};\n\ntype State = {\n  query: string,\n  sort: string,\n};\n\nexport class TodoList extends React.Component<Props> {\n  state: State = {\n    query: '',\n    sort: '',\n  };\n\n  changeTodos = (event: FilterEvent) => {\n    this.setState(state => ({\n      ...state,\n      sort: event.target.value,\n    }));\n  };\n\n  filterTodos = (todos: Todo[], sort: string) => {\n    switch (sort) {\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n      case 'active':\n        return todos.filter(todo => !todo.completed);\n      default:\n        return todos;\n    }\n  };\n\n  visibleTodos = () => {\n    const { query, sort } = this.state;\n    const { todos } = this.props;\n\n    const visibleTodos = todos.filter(todo => {\n      return todo.title.toLocaleLowerCase().includes(query);\n    });\n\n    return this.filterTodos(visibleTodos, sort);\n  };\n\n  render() {\n    const { selectedUserId } = this.props;\n    const { sort } = this.state;\n\n    const newTodos = this.visibleTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <form>\n            <select\n              value={sort}\n              onChange={this.changeTodos}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={this.state.query}\n              onChange={event => {\n                this.setState({\n                  query: event.target.value,\n                });\n              }}\n            />\n          </form>\n          <ul className=\"TodoList__list\">\n            {newTodos.map(todo => (\n              (todo.completed) ? (\n                <li\n                  key={todo.id}\n                  className=\"TodoList__item TodoList__item--checked\"\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly checked />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    onClick={() => selectedUserId(todo.userId)}\n                  >\n                    User\n                    {' '}\n                    {todo.userId}\n                  </button>\n                </li>\n              ) : (\n                <li\n                  key={todo.id}\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                      TodoList__user-button\n                      TodoList__user-button--selected\n                      button\n                    \"\n                    type=\"button\"\n                    onClick={() => selectedUserId(todo.userId)}\n                  >\n                    User\n                    {' '}\n                    {todo.userId}\n                  </button>\n                </li>\n              )\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n\nexport function getTodos(): Promise<Todo[]> {\n  return request('/todos');\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return request(`/users/${userId}`);\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype State = {\n  user: User | null,\n};\n\ntype Props = {\n  selectedUser: number;\n  clearUserId: (arg: number) => void;\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    return this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUser !== prevProps.selectedUser) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    const user = await getUser(this.props.selectedUser);\n\n    this.setState({\n      user,\n    });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { clearUserId } = this.props;\n\n    return (\n      user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {user?.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n          <p className=\"CurrentUser__email\">{user?.email}</p>\n          <p className=\"CurrentUser__phone\">{user?.phone}</p>\n          <button\n            type=\"button\"\n            onClick={() => clearUserId(0)}\n          >\n            Clear\n          </button>\n        </div>\n      ) : (\n        <h1>Нет информации</h1>\n      )\n    );\n  }\n}\n","/* eslint-disable react/no-access-state-in-setstate */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={(userId: number) => {\n              return this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUser={selectedUserId}\n                clearUserId={(userId: number) => {\n                  return this.setState({ selectedUserId: userId });\n                }}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}